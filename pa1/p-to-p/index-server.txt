Design of the Index server :

The Index server is responsible for the following :
    - keeping an index of all the files registered by the peer servers.
    - allow peer servers to query for a particular file. Here the index server
      returns the list of peer-server names which are sharing that file.

For the above mentioned servcies we have implemented the following two RPC
services :
    - registry()
    - search()

Indexing Framework

For indexing purpose we decided to use a simple directory/file based database. Here
is the outline of the framework.

The index server creates an index directory ("/tmp/indsvr") when the first
request for registration is received. When a peer server tries to register a
file with the index server it checks if a file by that name already exists under
"/tmp/indsvr". If not it creates one and writes the name of the peer in that
file. If the file was already registered by another peer we just append the name
of the new peer to the file.

Note : The index server before adding the name of the peer check if the peername
is already registered for that file. If it already is registered, it just
returns success. This avoids having duplicate entries of peer names in the
registry record (aka. the file  in our case).

Example :
    Let's assume we have a peer by name "peer1" which is trying to register the
    file "file1.txt" with the index server.

    Steps taken by Index server :
    - The index server will check if the file "/tmp/indsvr/file1" already
      exists.
    - If not found it creates the file ("/tmp/indsvr/file1").
    - It then writes the name of the peer server ("peer1") to the file.
      The contents of the file "/tmp/indsvr/file1" would look as below :
      -- snip --
      $ cat /tmp/indsvr/file1
      peer1
      $
      -- snip --

    Now, if another peer by name "peer2" registers the same file "file1" here is
    what happens :
    - The index server finds that the file "/tmp/indsvr/file1" already exists.
    - It just appends the name of the peer ("peer2") to the file
      "/tmp/indsvr/file1".

      The contents of the file "/tmp/indsvr/file1" would look as below :
      -- snip --
      $ cat /tmp/indsvr/file1
      peer1
      peer2
      $
      -- snip --

This model of indexing keeps the code simple and fairly scalable. Because, the
indexing logic is now handled by the underlying filesystem's directory
implementation. FIlesystems typically scale well with directory entries up tens
of thousands. And this fits out bill.

However, if we wish to scale beyond this a database (like SQLite) can be easily
plugged in.

RPC Call - Registry - outline :
    This RPC call allows the peers to register one file at a time with the index
    server. The following are the arguments that are passed by the peer server :
    struct registry_rec {
        string  peer<MAXNAME>;      /* The name of the peer server */
        string  fname<MAXNAME>;     /* The filename that it wants to register */
        int     ret;                
    };

    The index server on receipt of this request registers the name of the peer
    as described in the section "Indexing Framework".

RPC Call - search - outlike :
    This RPC call allows the peer download application to query the index server
    for a particular file. The following are the arguments that are passed by
    the download app :
    struct query_req {
        string fname<MAXNAME>; /* Name of the file that the app is looking for */
        int count;              /* Max number of peers names that return value can contain */
    };

    The index server tries to open the file "/tmp/indsvr/<fname>". If found it
    reads the contents (which is a list of peers that are serving that file) in
    the following structure :
    struct query_rec {
        char fname[MAXNAME];    /* Name of the file that was asked by the app */
        int count;              /* Number of peers serving the file */
        char peers[BUFSIZE];    /* List of peer names indexed at MAXHOSTNAME length */
    };

    For example if peer3 download app was looking  for "file1" then the result
    returned by the index server would look as below :
    query_rec {
        char fname[MAXNAME] -> "file1"
        int count;          -> 2
        char peers[BUFSIZE]; -> ["peer1" "peer2"]
    };

    However, if the requested file is not registered we return with count = 0
    indicating that no peer is serving that file.


Multithreading the Index server :

In order to enable the index server to serve multiple requests simultaneously we
are creating a pthread for every request that comes in. Here is the outline of
the modification that is done :

The svc_run() routine invokes the dispatcher routine registered by
(svc_register()). The dispatcher routine does the following tasks :
1> Check the procedure number of the incoming RPC request and appropriately
   selects the input argument type and the result type. It also picks the
   appropriate service routine.
2> It then extracts the arguments from the svc_req pointer passed to it.
3> With the arguments and the holder for the results in place it calls the
   service routine. This is where the logic of registry or search is
   exercised.
4> It then sends the results back to the client.

To support multithreading we have modified the dispatcher routine
(indsrvprog_1) as below :
- We allocate a new data structure of type tdata_t which has the following info
  in it:
    - The svc_req and SVCXPRT pointers.
    - Pointer to the service routine 
    - argument and result types
    - the argument passed by the client
    - memory to store the results
- After steps 1 and 2 instead of calling the service routine directly we spawn a
  new thread and pass the tdata_t was created in the prior steps.
- The new pthread calls the service routine in its context. It then sends the
  reply back to the client with the results.
- Frees the memory allocated to the tdata_t struct which was the place holder
  for arguments and results.

With this approach the svc_run() is free to accept newer requests while the new
thread created simultaneously services the previously accepted request.

Further Improvements :
The above approach is a little inefficient as we create one new thread for
every new request that comes in. And the thread is destroyed once the
request is serviced.

Here the cost of pthread creation is incurred for incoming request. We could
improved this by pre-creating a threadpool of slave threads and service queue.
The new requests that come in could then be placed on the service queue and
the slave threads can pick these requests and service them.
    
Locking stratergy in Index server for multithreading support :
In order to support multithreading the following care has been taken :
- The skeleton routines are generated by passing "-M" option to rpcgen. This ensures that
  the skeleton routines are reentrant.
- We use flock() on the files that are being accessed. We take the shared lock
  (LOCK_SH) for search() operation (we only read the contents). Where as the registry()
  operation takes an exclusive lock (LOCK_EX) on the file as it could
  potentially modify the file.



