
We need to add code to cache the files locally.
    - We can modify the b_hitquery_1_svc() routine to also pull the file into a
      local cache and add it to the list.

      Approaches for local cache :
        - We could keep the cached files in a separate directory.
        - The index file could be the same as before.
We can have a 

- Today for each file we maintain only the host names which are serving it.
  In addition to this we need to keep :
    - version number of the file.

- A command to update the version of the file. Or a command line option to
  obtain_client would do.
    - The obtain-server will update the revision of the file and send a
      broadcase message to all the neighbors.
        - Message contains the following info :
            - FIlename
            - version number.

        - Each neighbour which sees this message will check its local cache and
          if outdated deletes the cache file.
                - For this to work the peer server will maintain the cache files
                  in a separate dir.
                - In the index dir we maintain the following info :
                       cached-version=<version-no> <origin-server-name>
                       <origin-server-name> 
                       <origin-server-name> 
                       <origin-server-name> 
                - So, when an invalidate message is received we do the following :
                    - modify the file in indexdir to make the <version-no> to -1
                      to indicate that we no longer have a cached entry
                    - delete the cached file.
                    - fetch a new file.
                    - modify the <version-no> with the current version.
=========================================                    

Push Implementation :
---------------------

- "fileupdate <filename>" 
    - This is a new command which allows user to update the revision of a file.
    - This command will call the update() RPC call to the local peer server to
      update a file.
        - The update() will do the following :
            - Check if it is the origin server for the file <filename>
            - If yes,
                - sends out the invalidate() RPC call to all its neighbors :
                    struct inval_req {
                        char filename[MAXFILENAME];
                        int     oldrev;
                        int     newrev;
                        int     ttl;
                    }

- Implement invalidate() RPC call.
    - This is same as query(). 
    - It is a oneway rpc call.
    - the origin server sends out a oneway rpc call to all its neighbors.
    - on receipt of this call the peer server does the following :
        - Decrements TTL.
        - If not zero :
            - Send to all neighbors
        - Check if we have a local cache
        - If yes, 
            - mark it invalid (for this make the rev no to -1)
            - Fetch the new copy
            - Update the rev
            NOTE : If another request is received for the same file later and if
            we see that the rev number is -1, it indicates that another thread
            is already fetching the new rev. Hence, don't do anything.


- For the invalidate requests we should maintain a separate linked list. -->> 
    - the update() and invalidate() routines add the current request to this 
      queue.


=====================================

Pending items :

Thread to Randomly trigger update.
----------------------------------
- An option to automatically simulate updates to files.
    - "-T <delay>" option to obtain_server
    - this will create a thread and it will
        - sleep for a random time (between 0 and delay secs)
        - Randomly pick a file and update it.
            - For this we need a count of files we are serving : filecount
            - generate a random number : fileno = between 0 - filecount
            - open the sharedir, call readdir() fileno times. This will get us
              the random file that we picked. 
            - Call update_1_svc() on it.


Pull Method :
-------------
- A RPC method : validate(filename, vernumber) -> result (filename, newversion)
    - validate() method:
        - Call find_origin_rec().
        - compare vernumber to the vernumber from origin-rec.
        - Send the response back with :
            - filename
            - newversion

- A thread is created for this on the obtain_server which does the following :
    - For every file in CACHE_DIR :
        - It finds the origin_rec for the file : calls find_origin_rec()
        - Call stat() for the CACHE_DIR/file.
        - Checks if (current_time  - mtime) > TTR 
            - Call validate(filename, vernumber)
            - If the newversion is different :
                - update_rec().
        - sleep(5)
            - Ideally this should depend on the next refresh.

- Add options pull and push to obtain_svc_mt.c
    - -u - for push
    - -l <ttr-secs> - for pull

- Modification to send_local_cache() and search_1_svc()
    - The below check is in addtion to the existing check where we don't add an
      entry if its rev is not the same as origin server.
    - If pull mode is on:
        - stat() on the cachefile.
        - check if the current_time - modtime > TTR
        - if so don't add it.

