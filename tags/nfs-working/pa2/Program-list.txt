
Obtain Server files (aka. Peer server):
---------------------------------------
obtain.x        : The RPC definition of the obtain server. 
obtain.h        : The header file generated by rpcgen
obtain_xdr.c    : The XDR routines for marshalling generated by rpcgen .
obtain_server.c : The CRUX of the peer server. This file has to code to relay / propogate
		  the search to all its peers. This is file has the code to
                  serve chunks (4Kbytes) of the file requested.
obtain_svc.c    : The server side skeleton generated by rpcgen. This was used as
                  the baseline for implementing the multithreaded skeleton
                  (obtain_svc_mt.c).
obtain_svc_mt.c : The multithreaded server skeleton which has the code to
                  register the files being served. And then serving the requests
                  for chunks of files.
obtain_clnt.c   : The client stub generated by rpcgen.
obtain_client.c : The client app that the users will use to fetch the files.
Makefile.obtain : The makefile generated by rpcgen and later modified to add the 
                  multithreaded (obtain_svc_mt.c) instead of standard (obtain_svc.c).


Accompanying scripts and docs :
-------------------------------
test.sh         : The script which was used to call the obtain_client in a loop
                  for 200 times to stress test.
Manual.txt      : The Manual which explains the usage of each component
Peer-list-files : The configuration files used to start the server and register 
                  its  peers are placed in the respective configuration directory
clear_all.sh    : clear_all.sh goes and kills the instance of the obtain server
                  if running on all the nodes. It even clears the config information
                  stored in /tmp/indsvr directory.
other scripts   : There are other scripts like star-4node.sh, mesh-12n0de.sh et all
                  which are used to start the obtain server on multiple nodes with
                  their corresponding config files and shared data.

Configurations  and scripts to start different configurations :
----------------------------------------------------------------
We have written scripts to start servers in a particular configurations.
The following directories have the necessary configs and scripts :
mesh-10node :  A mesh config with 10 nodes
mesh-12node : A mesh config with 12 nodes
relay-test : A relay config (ie. a string of 4 nodes)
star-4node : A star config of 4 nodes
star-10node : A star config of 10 nodes

In each of these directories we have the following :
    - A script to start servers for that configuration.
      Eg : mesh-10node/mesh-10node.sh : Starts all the peer servers for the 10 node mesh config.
    - The peer-list file for every node in that config.
      Eg :
      $ cat mesh-10node/compute-0-0.peers
      compute-0-1.local
      compute-0-3.local
      $

Data files for all the nodes:
-----------------------------
The following directories contains test files ranging from 1Kbytes to 11Kbytes
and a large PDF file (pa1.pdf) of size 512kbytes :
    - data/share1
    - data/share2
    - data/share3
    .
    .
    .
    - data/share14


Source Code :
------------
Source code of the project is hosted on http://cs550.googlecode.com/svn/trunk/pa2/

