The following will be the layout of the metadata file :

filename
--------
<size>
<offset> <len> <dsname> <filename.ext1>
<offset> <len> <dsname> <filename.ext2>
<offset> <len> <dsname> <filename.ext2>
<offset> <len> <dsname> <filename.ext2>

To keep things simple we fix the size of the extent to STRIPE_SZ (which we have
set to 16K).

When a client asks for a write if we fail to find an extent we 
allocate a new extent and return that to the server

The client sends getlayout request in STRIPE_SZ sizes always.
This makes it easy for the server to search for the extent in the file.
And if not found we allocate an extent.

Each extent is saved on the data server as a separate file with the name as
follows :
    <original-filename>.ext<n>

    For example if the filename is file1, it's first extent will be 
    "file1.ext1"

NOTE : This style of mapping should not cause issues with file names as we
always append the string ".extN" (where N represent the extent number) to the 
name of the file.


pnfs_read() {
    count = size;

    while (count != 0) {
        - if the cur_off is not within the range of extent-record
            - getlayout(cur_off) for the current offset;
        - if we got a valid extent-record
            - read_c() to the ds of that client in chunks of SIZE.
            - update count;
        - If we got an invalid extent-record
            - exit from the call with the current amount read.
    }
}

pnfs_write() {
    while (count != 0) {
        - if the cur_off is not within the range of the extent-record
            - getlayout(cur_off, WRITE) for the offset;
              (This will allocate a new extent of STRIPE_SZ if needed)
              (Also getlayout will update the size of the file if needed).
        - write_c() to the data-server in SIZE chunk
            - Passes the following argument
            - offset, len, extname (which is filename.ext returned by extent-record).
    }
}
