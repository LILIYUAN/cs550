This file explains the steps involved in compiling the code. And also the steps
to start the servers and the client application.

Tar file Contents :

Steps to compile the code :
---------------------------
- Executable name : obtain_client obtain_server 
- We have a Makefile script "Makefile.obtain". This script invokes the make for both 
  obtain server and obtain client

    - obtain_server : The peer server which should started by each peer to share
      the files from a directory and to register its trusted peers.

    - obtain_client : The peer client which the user should use to fetch the
      files.

Steps to start the peer server :
--------------------------------
- Executable name : ./obtain_server
- Put all the files that the peer server wants to share in a directory.
  For example we have share1 directory which has the following files.
    -- snip --
    $ ls -l share1
    total 640
    -rw-r--r-- 1 sbagewad stud  31679 2011-02-27 16:46 file1
    -rw-r--r-- 1 sbagewad stud  10530 2011-02-27 17:22 file-10k
    -rw-r--r-- 1 sbagewad stud   1053 2011-02-27 17:17 file-1k
    -rw-r--r-- 1 sbagewad stud  15879 2011-02-27 18:33 file2
    -rw-r--r-- 1 sbagewad stud   2106 2011-02-27 17:18 file-2k
    -rw-r--r-- 1 sbagewad stud   3159 2011-02-27 17:18 file-3k
    -rw-r--r-- 1 sbagewad stud   4212 2011-02-27 17:18 file-4k
    -rw-r--r-- 1 sbagewad stud   5265 2011-02-27 17:21 file-5k
    -rw-r--r-- 1 sbagewad stud   6318 2011-02-27 17:19 file-6k
    -rw-r--r-- 1 sbagewad stud   7371 2011-02-27 17:19 file-7k
    -rw-r--r-- 1 sbagewad stud   8424 2011-02-27 17:21 file-8k
    -rw-r--r-- 1 sbagewad stud   9477 2011-02-27 17:21 file-9k
    -rw-r--r-- 1 sbagewad stud 521158 2011-02-27 16:53 pa1.pdf
    -- snip --

- The peer sever takes the following arguments :
    -- snip --
    $ ./obtain_server
     Usage : ./obtain_server [-t <delay>] [-u] [-l <ttrtime>] <peer-list-file> <share-dir>

     -t <delay> : triggers updates to random files at random time exponentially distributed
     -u : push the updates to peers
     -l <ttrtime> : pull the updates from peers. ttrtime is the time-to-refresh in secs
     peer-list-file : file containing the Hostnames of the peers
     share-dir : Directory that you would like to share
    -- snip --

  Here is an example of peer-list-file. It contains the list of peers that the 
  the node trusts.
    --snip--
    $ cat star-4node/compute-0-3.peers
    compute-0-0.local
    compute-0-1.local
    compute-0-2.local
    --snip--

  Here is an example of starting the peer server on compute-0-0.cs.iit.edu with
  index server running on "csrocks" :

    -- snip --
    $ ./obtain_server  -u -t 100 relay-test/compute-0-0.peers data/share0
    Registering file : file-2k to the index-server : csrocks
    Registering file : file-10k to the index-server : csrocks
    Registering file : file-1k to the index-server : csrocks
    Registering file : file1 to the index-server : csrocks
    Registering file : .svn to the index-server : csrocks
    Registering file : file-7k to the index-server : csrocks
    Registering file : file-6k to the index-server : csrocks
    Registering file : file2 to the index-server : csrocks
    Registering file : file-5k to the index-server : csrocks
    Registering file : file-8k to the index-server : csrocks
    Registering file : file-3k to the index-server : csrocks
    Registering file : file-9k to the index-server : csrocks
    Registering file : file-4k to the index-server : csrocks
    Registering file : pa1.pdf to the index-server : csrocks
    Now ready to serve them
    -- snip --

    NOTE :  1> The peer servers can be started on multiple servers.
                For example we tried starting the peer servers on :
                    - compute-0-0 relay-test/compute-0-0.peers "./share1"
                    - compute-0-1 relay-test/compute-0-3.peers "./share3"
                    
            2> We cannot start multiple peer servers on the same node as they all
            use the same RPC program number and hence would overwrite the
            registration with rpcbind (ie. rpc port mapper).

Steps to start the different configurations :
---------------------------------------------

- We have scripts to start the peer servers on different machine and configure them
  for star, mesh and other configurations. 

- clear_all.sh   : This script is to clean up the environment. It kills the
                   previous instance of any peer server if running. Even the config 
		   files are cleaned up. This script can be used to clean the environment
		   while testing multiple setup's. 
- relay-test.sh  : This script is used to start the peer server on 4 nodes in relay configuration.
                   File is placed in relay-test folder.
- star-4node.sh  : This script is used to start the peer server on 4 nodes in star configuration.
                   File is placed in star-4node folder. 
- star-10node.sh : This script is used to start the peer server on 10 nodes in star configuration.
                   File is placed in star-10node folder
- mesh-4node.sh  : This script is used to start the peer server on 4 nodes in mesh configuration.
                   File is placed in mesh-4node folder.
- mesh-10node.sh : This script is used to start the peer server on 4 nodes in mesh configuration.
                   File is placed in mesh-10node folder.

Steps to use the peer client :
------------------------------
- Executable name : ./obtain_client
- The peer client (obtain_client) takes the following arguments :
    -- snip --
    $ ./obtain_client
     Usage : ./obtain_client [-f] <file-name> <dest-dir>

     -f : With this option it fetches the file from the first available peer
     file-name : name of the file that you are searching 
     dest-dir : Destination directory where you want to copy the fetched file
    -- snip --

- Example of fetching a file with interactive option :
  Assuming :
    - we are looking for the file "file-1k". 
    - we want to save the fetched file in "/tmp"
    Here is how the client is executed :

    -- snip --
    $ ./obtain_client file-1k /tmp
    Created the client
    searching(file-1k) 
    Time taken by index server = 0 secs
    Total number of peers serving file-1k = 2
    Peers service  192.168.0.102 are :
        0 : compute-0-0.local
        1 : compute-0-1.local
    Pick the peer from which you want to fetch from : 1
    obtain_1_svc() : Served 1053 bytes from ./share1/file-1k at offset : 0
    Time taken to fetch the file = 0 secs

    sbagewad@csrocks:~/trunk/pa1/p-to-p$ head /tmp/file-1k
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    -- snip --

- We have "-f" for the non-interactive way of petching the file. Here the app will
  pick the first listed peer and then fetches it from that peer.

    -- snip --
    $ ./obtain_client -f file-1k /tmp
    Created the client
    searching(file-1k) 
    Time taken by index server = 0 secs
    Total number of peers serving file-1k = 2
    Peers service  192.168.0.102 are :
        0 : compute-0-0.local
        1 : compute-0-1.local
    Time taken to fetch the file = 0 secs
    -- snip --

- The client is also smart to try other listed server (if it fails to fetch from the choosen one).
  Assuming we killed the obtain server on compute-0-0. It would try to fetch it from the next
  server which is serving it

    -- snip --
    $ ./obtain_client -f file-1k /tmp
    Created the client
    searching(file-1k) 
    Time taken by index server = 0 secs
    Total number of peers serving file-1k = 2
    Peers service  192.168.0.128 are :
        0 : compute-0-0.local
        1 : compute-0-1.local 
    compute-0-0 :  RPC: Remote system error - Connection refused
    Failed to fetch the file from host:compute-0-0                  <-------******* Retry in action
    Trying next server                                              <-------*******
    Time taken to fetch the file = 0 secs
    -- snip --

Test Logs :
-----------

- Logs of tests are placed in the respective test case configuration directory. 
  It has client logs for both push and pull setup's. 
  
  relay-test/push/client.log
  relay-test/pull/client.log

  mesh-10node/push/client.log
  mesh-10node/pull/client.log
  
  Server logs are placed in relay-test and mesh-10node directories

